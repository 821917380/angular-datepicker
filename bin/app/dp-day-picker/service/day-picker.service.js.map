{"version":3,"names":[],"mappings":"","sources":["app/dp-day-picker/service/day-picker.service.js"],"sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require('@angular/core');\nvar moment = require('moment');\nvar utils_service_1 = require('../../common/services/utils/utils.service');\nvar DayPickerService = (function () {\n    function DayPickerService() {\n        this.defaultConfig = {\n            firstDayOfWeek: 'su',\n            calendarsAmount: 1,\n            format: 'DD-MM-YYYY',\n            monthFormat: 'MMM, YYYY',\n            closeOnSelect: true,\n            closeOnSelectDelay: 100,\n            weekdayNames: {\n                su: 'sun',\n                mo: 'mon',\n                tu: 'tue',\n                we: 'wed',\n                th: 'thu',\n                fr: 'fri',\n                sa: 'sat'\n            },\n            disableKeypress: false\n        };\n    }\n    DayPickerService.prototype.formatValues = function (config) {\n        var format = config.format, min = config.min, max = config.max;\n        if (min && typeof min === 'string') {\n            config.min = moment(min, format);\n        }\n        if (max && typeof max === 'string') {\n            config.max = moment(max, format);\n        }\n    };\n    DayPickerService.prototype.getConfig = function (config) {\n        var _config = Object.assign({}, this.defaultConfig, config);\n        this.formatValues(_config);\n        return _config;\n    };\n    DayPickerService.prototype.generateCalendars = function (config, selected, month) {\n        var base = (month && month.clone()) || (selected && selected.clone()) || moment();\n        return utils_service_1.UtilsService.createArray(config.calendarsAmount).map(function (n, i) { return ({\n            month: base.clone().add(i, 'month'),\n            selected: selected,\n            firstDayOfWeek: config.firstDayOfWeek,\n            weekdayNames: config.weekdayNames,\n            min: config.min,\n            max: config.max\n        }); });\n    };\n    DayPickerService.prototype.isDateValid = function (date, format) {\n        if (date === '') {\n            return true;\n        }\n        return moment(date, format, true).isValid();\n    };\n    DayPickerService.prototype.moveCalendars = function (config, selected, base, months) {\n        var month = base.clone().add(months, 'month');\n        return this.generateCalendars(config, selected, month);\n    };\n    DayPickerService.prototype.isMinMonth = function (min, month) {\n        return min ? month.clone().subtract(1, 'month').isBefore(min, 'month') : false;\n    };\n    DayPickerService.prototype.isMaxMonth = function (max, month) {\n        return max ? month.clone().add(1, 'month').isAfter(max, 'month') : false;\n    };\n    DayPickerService.prototype.createValidator = function (_a, dateFormat) {\n        var minDate = _a.minDate, maxDate = _a.maxDate;\n        var isValid;\n        var value;\n        var validators = [];\n        if (minDate) {\n            validators.push({\n                key: 'minDate',\n                isValid: function () {\n                    var _isValid = value.isSameOrAfter(minDate, 'day');\n                    isValid = isValid ? _isValid : false;\n                    return _isValid;\n                }\n            });\n        }\n        if (maxDate) {\n            validators.push({\n                key: 'maxDate',\n                isValid: function () {\n                    var _isValid = value.isSameOrBefore(maxDate, 'day');\n                    isValid = isValid ? _isValid : false;\n                    return _isValid;\n                }\n            });\n        }\n        return function validateInput(c) {\n            isValid = true;\n            if (c.value) {\n                value = typeof c.value === 'string' ? moment(c.value, dateFormat) : c.value;\n            }\n            else {\n                return null;\n            }\n            if (!value.isValid()) {\n                return {\n                    format: {\n                        given: c.value\n                    }\n                };\n            }\n            var errors = validators.reduce(function (map, err) {\n                if (!err.isValid()) {\n                    map[err.key] = {\n                        given: value\n                    };\n                }\n                return map;\n            }, {});\n            return !isValid ? errors : null;\n        };\n    };\n    DayPickerService = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [])\n    ], DayPickerService);\n    return DayPickerService;\n}());\nexports.DayPickerService = DayPickerService;\n"],"file":"day-picker.service.js"}