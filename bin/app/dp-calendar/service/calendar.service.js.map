{"version":3,"names":[],"mappings":"","sources":["app/dp-calendar/service/calendar.service.js"],"sourcesContent":["\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar core_1 = require('@angular/core');\nvar moment = require('moment');\nvar utils_service_1 = require('../../common/services/utils/utils.service');\nvar CalendarService = (function () {\n    function CalendarService() {\n        this.DAYS = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n    }\n    CalendarService.prototype.generateDaysIndexMap = function (firstDayOfWeek) {\n        var firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n        var daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n        return daysArr.reduce(function (map, day, index) {\n            map[index] = day;\n            return map;\n        }, {});\n    };\n    CalendarService.prototype.generateDaysMap = function (firstDayOfWeek) {\n        var firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n        var daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n        return daysArr.reduce(function (map, day, index) {\n            map[day] = index;\n            return map;\n        }, {});\n    };\n    CalendarService.prototype.generateMonthArray = function (firstDayOfWeek, dayInMonth, selectedDay) {\n        if (selectedDay === void 0) { selectedDay = null; }\n        var monthArray = [];\n        var firstDayOfMonth = dayInMonth.clone().startOf('month');\n        var firstDayOfWeekIndex = this.DAYS.indexOf(firstDayOfWeek);\n        var firstDayOfBoard = firstDayOfMonth;\n        while (firstDayOfBoard.day() !== firstDayOfWeekIndex) {\n            firstDayOfBoard.subtract(1, 'day');\n        }\n        var current = firstDayOfBoard.clone();\n        var daysOfCalendar = utils_service_1.UtilsService.createArray(42).reduce(function (array) {\n            array.push({\n                date: current.clone(),\n                selected: current.isSame(selectedDay, 'day'),\n                currentMonth: current.isSame(dayInMonth, 'month'),\n                prevMonth: current.isSame(dayInMonth.clone().subtract(1, 'month'), 'month'),\n                nextMonth: current.isSame(dayInMonth.clone().add(1, 'month'), 'month'),\n                currentDay: current.isSame(moment(), 'day')\n            });\n            current.add(1, 'd');\n            return array;\n        }, []);\n        daysOfCalendar.forEach(function (day, index) {\n            var weekIndex = Math.floor(index / 7);\n            if (!monthArray[weekIndex]) {\n                monthArray.push([]);\n            }\n            monthArray[weekIndex].push(day);\n        });\n        return monthArray;\n    };\n    CalendarService.prototype.generateWeekdays = function (firstDayOfWeek, weekdayNames) {\n        var weekdays = [];\n        var daysMap = this.generateDaysMap(firstDayOfWeek);\n        for (var dayKey in daysMap) {\n            if (daysMap.hasOwnProperty(dayKey)) {\n                weekdays[daysMap[dayKey]] = weekdayNames[dayKey];\n            }\n        }\n        return weekdays;\n    };\n    CalendarService.prototype.isDateDisabled = function (day, config) {\n        if (config.isDisabledCallback) {\n            return config.isDisabledCallback(day.date);\n        }\n        if (config.min && day.date.isBefore(config.min, 'd')) {\n            return true;\n        }\n        if (config.max && day.date.isAfter(config.max, 'd')) {\n            return true;\n        }\n        return false;\n    };\n    CalendarService = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [])\n    ], CalendarService);\n    return CalendarService;\n}());\nexports.CalendarService = CalendarService;\n"],"file":"calendar.service.js"}